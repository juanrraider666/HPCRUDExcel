<?php
/**
 * Created by PhpStorm.
 * User: WGONZALEZ
 * Date: 23/08/2017
 * Time: 5:07 PM
 */

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Criteria;
use FOS\UserBundle\Entity\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="fos_user")
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\DealCompany")
     * @ORM\JoinColumn(name="deal_company_id", referencedColumnName="id")
     * @Assert\NotBlank(groups={"Registration"})
     */
    private $dealCompany;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Country")
     * @ORM\JoinColumn(name="country_id", referencedColumnName="id")
     */
    private $country;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Loyalty")
     * @ORM\JoinColumn(name="loyalty_id", referencedColumnName="id")
     */
    private $loyalty;

    /**
     * @ORM\Column(type="string", length=100)
     * @Assert\NotBlank(groups={"Registration","newCompanyRegistration"})
     */
    private $firstName;

    /**
     * @ORM\Column(type="string", length=100)
     * @Assert\NotBlank(groups={"Registration","newCompanyRegistration"})
     */
    private $lastName;

    /**
     * @ORM\Column(type="string", length=100)
     * @Assert\NotBlank(groups={"Registration","newCompanyRegistration"})
     */
    private $jobTitle;

    /**
     * @var boolean
     *
     * @ORM\Column(name="registered", type="boolean", nullable=true)
     */
    private $registered = true;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="registration_date", type="datetime", nullable=true)
     */
    protected $registrationDate;

    /**
     * @var boolean
     */
    private $newCompany;

    /**
     * @var phone
     *
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\PhoneUser", cascade={"all"}, mappedBy="user", orphanRemoval=true)
     * @Assert\Valid
     */
    private $phones;

    public function __construct()
    {
        parent::__construct();
        $this->phones = new ArrayCollection();
        $this->registrationDate = new \DateTime('now');
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set dealCompany
     *
     * @param \AppBundle\Entity\DealCompany $dealCompany
     *
     * @return User
     */
    public function setDealCompany(\AppBundle\Entity\DealCompany $dealCompany = null)
    {
        $this->dealCompany = $dealCompany;
        $this->setCountry($dealCompany->getCountry());

        return $this;
    }

    /**
     * Get dealCompany
     *
     * @return \AppBundle\Entity\DealCompany
     */
    public function getDealCompany()
    {
        return $this->dealCompany;
    }

    /**
     * Set country
     *
     * @param \AppBundle\Entity\Country $country
     *
     * @return User
     */
    public function setCountry(\AppBundle\Entity\Country $country = null)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     *
     * @return \AppBundle\Entity\Country
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set loyalty
     *
     * @param \AppBundle\Entity\Loyalty $loyalty
     *
     * @return User
     */
    public function setLoyalty(\AppBundle\Entity\Loyalty $loyalty = null)
    {
        $this->loyalty = $loyalty;

        return $this;
    }

    /**
     * Get loyalty
     *
     * @return \AppBundle\Entity\Loyalty
     */
    public function getLoyalty()
    {
        return $this->loyalty;
    }

    public function setEmail($email)
    {
        $this->setUsername($email);

        return parent::setEmail($email); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    public function getJobTitle()
    {
        return $this->jobTitle;
    }

    /**
     * @param mixed $jobTitle
     */
    public function setJobTitle($jobTitle)
    {
        $this->jobTitle = $jobTitle;
    }

    /**
     * Set registered
     *
     * @param boolean $registered
     *
     * @return User
     */
    public function setRegistered($registered)
    {
        $this->registered = $registered;

        return $this;
    }

    /**
     * Get registered
     *
     * @return boolean
     */
    public function getRegistered()
    {
        return $this->registered;
    }

    /**
     * Set registrationDate
     *
     * @param \DateTime $registrationDate
     *
     * @return User
     */
    public function setRegistrationDate(\DateTime $registrationDate)
    {
        $this->registrationDate = $registrationDate;

        return $this;
    }

    /**
     * Get registrationDate
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->registrationDate;
    }

    /**
     * Add phone
     *
     * @param \AppBundle\Entity\PhoneUser $phone
     *
     * @return User
     */
    public function addPhone(\AppBundle\Entity\PhoneUser $phone)
    {
        $this->phones[] = $phone;
        $phone->setUser($this);

        return $this;
    }

    /**
     * Remove phone
     *
     * @param \AppBundle\Entity\PhoneUser $phone
     */
    public function removePhone(\AppBundle\Entity\PhoneUser $phone)
    {
        $this->phones->removeElement($phone);
    }

    /**
     * Get phones
     *
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getPhones()
    {
        return $this->phones;
    }

    /**
     * @return bool
     */
    public function isNewCompany()
    {
        return $this->newCompany;
    }

    /**
     * @param bool $newCompany
     */
    public function setNewCompany($newCompany)
    {
        $this->newCompany = $newCompany;
    }

    public function hasPhoneType($phoneType)
    {
        $criteria = Criteria::create()->where(Criteria::expr()->eq("type", $phoneType));

        if(sizeof($this->getPhones()->matching($criteria))>0){
            return true;
        }
        return false;
    }

    static function determineValidationGroups(FormInterface $form)
    {
        $data = $form->getData();

        if($data->isNewCompany()){
            return array("newCompanyRegistration","Default");
        }else{
            return array("Registration","Default");
        }
    }
}

// Generated by CoffeeScript 1.8.0
(function() {
  var ChainedSelects, Select, SelectFactory;

  Select = function(select) {
    var props;
    props = {
      target: (function() {
        var target;
        target = select.data('chain-target') ? $('.' + select.data('chain-target')) : null;
        if (target) {
          return SelectFactory.get(target);
        } else {
          return target;
        }
      })(),
      firstOpt: (function() {
        return $('option:first', select).clone();
      })(),
      select: select,
      getValue: function() {
        return select.val();
      },
      clean: function() {
        select.html(this.firstOpt.clone());
        return this;
      },
      loading: function() {
        select.html($('<option>').html('Loading...'));
        this.cleanChildren();
        return this;
      },
      cleanChildren: function() {
        var child;
        child = this.target;
        if (child) {
          child.clean();
          if (child.target) {
            child.cleanChildren();
            return;
          }
        }
      },
      createOption: function(row) {
        return $('<option>').val(row.id).html(row.name);
      },
      fill: function(data) {
        var row, _i, _len;
        this.target.clean();
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          row = data[_i];
          this.target.select.append(this.createOption(row));
        }
      }
    };
    return props;
  };

  SelectFactory = {
    set: function(select, obj) {
      return select.data('select', obj);
    },
    get: function(select) {
      var obj;
      obj = select.data('select');
      if (!obj) {
        obj = new Select(select);
        this.set(select, obj);
      }
      return obj;
    }
  };

  ChainedSelects = function(options) {
    var defaultoptions, obj;
    defaultoptions = {
      selector: 'select[data-chain-target]',
      routeName: 'deal_company_get_by_type'
    };
    options = $.extend(defaultoptions, options);
    obj = {
      getUrl: function(id) {
        return Routing.generate(options.routeName, {
            id: id,
            _locale:LOYALTY_GLOBALS.locale
        });
      },
      changeHandler: function() {
        var self;
        self = this;
        $(options.selector).on('change', function() {
          var select, url;
          defaultoptions.routeName = $(this).data("url-target");
          select = SelectFactory.get($(this));
          if (select.getValue()) {
            url = self.getUrl(select.getValue());
            select.target.loading();
            return $.get(url, null, function(data) {
              return select.fill(data);
            });
          } else {
            return select.cleanChildren();
          }
        });
      },
      init: function() {
        var self;
        self = this;
        return self.changeHandler();
      }
    };
    $(document).ready(function(){
      obj.init();
    });
  };

  ChainedSelects();

}).call(this);

//# sourceMappingURL=chained_selects.js.map
